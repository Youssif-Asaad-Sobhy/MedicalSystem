// <auto-generated />
using System;
using MS.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MS.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240217095258_seedingdata")]
    partial class seedingdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MS.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00992da5-ca28-4d64-ab61-44744c90b798",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "bf73e652-d598-450b-91b2-dc18a7b3d44e",
                            EmailConfirmed = false,
                            Gender = "male",
                            LockoutEnabled = false,
                            NID = "2636523632",
                            Name = "Mohamed",
                            NormalizedEmail = "MOHAMED@EXAMPLE.COM",
                            NormalizedUserName = "MOHAMEDALI123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ae810c8-31ad-43ef-92df-05d451ad17a5",
                            TwoFactorEnabled = false,
                            UserName = "MohamedAli123"
                        },
                        new
                        {
                            Id = "064650b8-3ce8-420b-a420-ed89cc8e0eba",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2012, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "844c8e38-3d18-469a-be95-e9192a132532",
                            EmailConfirmed = false,
                            Gender = "Female",
                            LockoutEnabled = false,
                            NID = "5312523632",
                            Name = "Mona",
                            NormalizedEmail = "MONA@EXAMPLE.COM",
                            NormalizedUserName = "MONAOMAR123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "916cf95f-c695-4118-8c3b-6573bc1286d1",
                            TwoFactorEnabled = false,
                            UserName = "monaomar123"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Clinic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("clinics");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DepartmentID = 1,
                            Name = "Elzahraa"
                        },
                        new
                        {
                            ID = 2,
                            DepartmentID = 2,
                            Name = "Alpha"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.ClinicPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClinicID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ClinicID");

                    b.ToTable("clinicsPrice");

                    b.HasData(
                        new
                        {
                            ID = 3,
                            ClinicID = 1,
                            Name = "X-ray",
                            Price = 260.39999999999998
                        },
                        new
                        {
                            ID = 1,
                            ClinicID = 2,
                            Name = "X-Alpha",
                            Price = 341.39999999999998
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("HospitalID");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HospitalID = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            ID = 2,
                            HospitalID = 1,
                            Name = "Orthopedics"
                        },
                        new
                        {
                            ID = 3,
                            HospitalID = 2,
                            Name = "Neurology"
                        },
                        new
                        {
                            ID = 4,
                            HospitalID = 2,
                            Name = "Oncology"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Document", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ReportID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ReportID");

                    b.ToTable("documents");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Content = new byte[0],
                            ReportID = 1
                        },
                        new
                        {
                            ID = 2,
                            Content = new byte[0],
                            ReportID = 2
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Equipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("equipments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "High-field MRI machine for diagnostic imaging",
                            Name = "MRI Machine"
                        },
                        new
                        {
                            ID = 2,
                            Description = "X-ray machine for radiographic imaging",
                            Name = "X-ray Machine"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Hospital", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Government")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("hospitals");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            City = "New York City",
                            Country = "United States",
                            Government = "State Government",
                            Name = "Mount Sinai Hospital",
                            Phone = "+1-212-241-6500",
                            Type = 0
                        },
                        new
                        {
                            ID = 2,
                            City = "Rochester",
                            Country = "United States",
                            Government = "Local Government",
                            Name = "Mayo Clinic",
                            Phone = "+1-507-284-2511",
                            Type = 1
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Lab", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("HospitalID");

                    b.ToTable("labs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HospitalID = 1,
                            Name = "Clinical Pathology Lab",
                            Type = 1
                        },
                        new
                        {
                            ID = 2,
                            HospitalID = 2,
                            Name = "Microbiology Lab",
                            Type = 0
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Medicine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("medicines");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Aspirin"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Paracetamol"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.MedicineType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineID")
                        .HasColumnType("int");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.Property<string>("Warning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MedicineID");

                    b.HasIndex("TypeID");

                    b.ToTable("medicinesType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Painkiller",
                            ExpirationDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 1,
                            SideEffects = "May cause drowsiness",
                            TypeID = 1,
                            Warning = "Do not exceed recommended dosage"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Antibiotic",
                            ExpirationDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 2,
                            SideEffects = "Possible nausea and diarrhea",
                            TypeID = 2,
                            Warning = "Take with food"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Pharmacy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("HospitalID");

                    b.ToTable("pharmacies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HospitalID = 1,
                            Name = "Walgreens"
                        },
                        new
                        {
                            ID = 2,
                            HospitalID = 2,
                            Name = "CVS Pharmacy"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.PharmacyMedicine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("MedicineTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("MedicineTypeID");

                    b.HasIndex("PharmacyID");

                    b.ToTable("pharmacyMedicines");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Amount = 50,
                            MedicineTypeID = 1,
                            PharmacyID = 1,
                            Price = 10.99
                        },
                        new
                        {
                            ID = 2,
                            Amount = 100,
                            MedicineTypeID = 2,
                            PharmacyID = 2,
                            Price = 5.9900000000000002
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.PlaceEquipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentID")
                        .HasColumnType("int");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EntityID");

                    b.HasIndex("EquipmentID");

                    b.ToTable("placeEquipments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EntityID = 1,
                            EquipmentID = 1,
                            PlaceType = 0
                        },
                        new
                        {
                            ID = 2,
                            EntityID = 2,
                            EquipmentID = 2,
                            PlaceType = 1
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.PlaceShift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.Property<int>("ShiftID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EntityID");

                    b.HasIndex("ShiftID");

                    b.ToTable("placeShifts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EntityID = 1,
                            PlaceType = 0,
                            ShiftID = 1
                        },
                        new
                        {
                            ID = 2,
                            EntityID = 2,
                            PlaceType = 1,
                            ShiftID = 2
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Report", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("reports");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Description of report 1",
                            DoctorID = 1,
                            Time = new DateTime(2024, 2, 16, 11, 52, 58, 420, DateTimeKind.Local).AddTicks(7883),
                            UserID = "1"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Description of report 2",
                            DoctorID = 2,
                            Time = new DateTime(2024, 2, 15, 11, 52, 58, 420, DateTimeKind.Local).AddTicks(7928),
                            UserID = "2"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.ReportMedicine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MedicineTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ReportID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MedicineTypeID");

                    b.HasIndex("ReportID");

                    b.ToTable("reportsMedicines");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            MedicineTypeID = 1,
                            ReportID = 1
                        },
                        new
                        {
                            ID = 2,
                            MedicineTypeID = 2,
                            ReportID = 2
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Reservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("EntityID");

                    b.HasIndex("UserID");

                    b.ToTable("reservations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EntityID = 1,
                            PlaceType = 0,
                            Price = 50.990000000000002,
                            State = 0,
                            Time = new DateTime(2024, 2, 18, 11, 52, 58, 420, DateTimeKind.Local).AddTicks(7970),
                            UserID = "1"
                        },
                        new
                        {
                            ID = 2,
                            EntityID = 2,
                            PlaceType = 1,
                            Price = 60.990000000000002,
                            State = 1,
                            Time = new DateTime(2024, 2, 19, 11, 52, 58, 420, DateTimeKind.Local).AddTicks(7974),
                            UserID = "2"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Shift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("shifts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EndTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 1,
                            Name = "Morning Shift",
                            PlaceType = 0,
                            StartTime = new DateTime(2024, 2, 17, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            EndTime = new DateTime(2024, 2, 17, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 2,
                            Name = "Evening Shift",
                            PlaceType = 1,
                            StartTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Test", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tests");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Blood Test"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Urinalysis"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.TestLab", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LabID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("TestLabID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LabID");

                    b.HasIndex("TestLabID");

                    b.ToTable("testLabs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Description of test lab 1",
                            LabID = 1,
                            Price = 100.0,
                            TestLabID = 1
                        },
                        new
                        {
                            ID = 2,
                            Description = "Description of test lab 2",
                            LabID = 2,
                            Price = 150.0,
                            TestLabID = 2
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Types", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("types");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Type 1"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Type 2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MS.Data.Entities.Clinic", b =>
                {
                    b.HasOne("MS.Data.Entities.Department", "Department")
                        .WithMany("Clinics")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("MS.Data.Entities.ClinicPrice", b =>
                {
                    b.HasOne("MS.Data.Entities.Clinic", "Clinic")
                        .WithMany("ClinicPrices")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("MS.Data.Entities.Department", b =>
                {
                    b.HasOne("MS.Data.Entities.Hospital", "Hospital")
                        .WithMany("Departments")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("MS.Data.Entities.Document", b =>
                {
                    b.HasOne("MS.Data.Entities.Report", "Report")
                        .WithMany("Documents")
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("MS.Data.Entities.Lab", b =>
                {
                    b.HasOne("MS.Data.Entities.Hospital", "Hospital")
                        .WithMany("Labs")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("MS.Data.Entities.MedicineType", b =>
                {
                    b.HasOne("MS.Data.Entities.Medicine", "Medicine")
                        .WithMany("MedicineTypes")
                        .HasForeignKey("MedicineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Types", "Types")
                        .WithMany("MedicineTypes")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("MS.Data.Entities.Pharmacy", b =>
                {
                    b.HasOne("MS.Data.Entities.Hospital", "Hospital")
                        .WithMany("Pharmacies")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("MS.Data.Entities.PharmacyMedicine", b =>
                {
                    b.HasOne("MS.Data.Entities.MedicineType", "MedicineType")
                        .WithMany("PharmacyMedicines")
                        .HasForeignKey("MedicineTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyMedicines")
                        .HasForeignKey("PharmacyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineType");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("MS.Data.Entities.PlaceEquipment", b =>
                {
                    b.HasOne("MS.Data.Entities.Clinic", null)
                        .WithMany("PlaceEquipment")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Lab", null)
                        .WithMany("PlaceEquipments")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Pharmacy", null)
                        .WithMany("PlaceEquipments")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Equipment", "Equipment")
                        .WithMany("PlaceEquipments")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("MS.Data.Entities.PlaceShift", b =>
                {
                    b.HasOne("MS.Data.Entities.Clinic", null)
                        .WithMany("PlaceShifts")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Lab", null)
                        .WithMany("PlaceShifts")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Pharmacy", null)
                        .WithMany("PlaceShifts")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Shift", "Shift")
                        .WithMany("PlaceShifts")
                        .HasForeignKey("ShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MS.Data.Entities.Report", b =>
                {
                    b.HasOne("MS.Data.Entities.ApplicationUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MS.Data.Entities.ReportMedicine", b =>
                {
                    b.HasOne("MS.Data.Entities.MedicineType", "MedicineType")
                        .WithMany("ReportMedicines")
                        .HasForeignKey("MedicineTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Report", "Report")
                        .WithMany("ReportMedicines")
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicineType");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("MS.Data.Entities.Reservation", b =>
                {
                    b.HasOne("MS.Data.Entities.Clinic", null)
                        .WithMany("Reservations")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Lab", null)
                        .WithMany("Reservations")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.ApplicationUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MS.Data.Entities.TestLab", b =>
                {
                    b.HasOne("MS.Data.Entities.Lab", "Lab")
                        .WithMany("TestLabs")
                        .HasForeignKey("LabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Test", "Test")
                        .WithMany("TestLabs")
                        .HasForeignKey("TestLabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MS.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MS.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MS.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MS.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("MS.Data.Entities.Clinic", b =>
                {
                    b.Navigation("ClinicPrices");

                    b.Navigation("PlaceEquipment");

                    b.Navigation("PlaceShifts");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("MS.Data.Entities.Department", b =>
                {
                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("MS.Data.Entities.Equipment", b =>
                {
                    b.Navigation("PlaceEquipments");
                });

            modelBuilder.Entity("MS.Data.Entities.Hospital", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Labs");

                    b.Navigation("Pharmacies");
                });

            modelBuilder.Entity("MS.Data.Entities.Lab", b =>
                {
                    b.Navigation("PlaceEquipments");

                    b.Navigation("PlaceShifts");

                    b.Navigation("Reservations");

                    b.Navigation("TestLabs");
                });

            modelBuilder.Entity("MS.Data.Entities.Medicine", b =>
                {
                    b.Navigation("MedicineTypes");
                });

            modelBuilder.Entity("MS.Data.Entities.MedicineType", b =>
                {
                    b.Navigation("PharmacyMedicines");

                    b.Navigation("ReportMedicines");
                });

            modelBuilder.Entity("MS.Data.Entities.Pharmacy", b =>
                {
                    b.Navigation("PharmacyMedicines");

                    b.Navigation("PlaceEquipments");

                    b.Navigation("PlaceShifts");
                });

            modelBuilder.Entity("MS.Data.Entities.Report", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("ReportMedicines");
                });

            modelBuilder.Entity("MS.Data.Entities.Shift", b =>
                {
                    b.Navigation("PlaceShifts");
                });

            modelBuilder.Entity("MS.Data.Entities.Test", b =>
                {
                    b.Navigation("TestLabs");
                });

            modelBuilder.Entity("MS.Data.Entities.Types", b =>
                {
                    b.Navigation("MedicineTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
