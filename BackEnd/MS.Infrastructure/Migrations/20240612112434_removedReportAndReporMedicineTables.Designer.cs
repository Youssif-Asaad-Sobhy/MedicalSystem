// <auto-generated />
using System;
using MS.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MS.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240612112434_removedReportAndReporMedicineTables")]
    partial class removedReportAndReporMedicineTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MS.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRegister")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "O+",
                            ConcurrencyStamp = "16f42d2d-f9bb-4f05-ad26-6086f8d77abc",
                            EmailConfirmed = false,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            IsRegister = true,
                            LastName = "Ali",
                            LockoutEnabled = false,
                            MaritalStatus = "Single",
                            NID = "2636523632",
                            NormalizedEmail = "MOHAMED@EXAMPLE.COM",
                            NormalizedUserName = "MOHAMEDALI123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0461953-32ff-4f88-9753-f88315464c21",
                            TwoFactorEnabled = false,
                            UserName = "MohamedAli123"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2012, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "A+",
                            ConcurrencyStamp = "edeab9e5-4752-4181-8589-7cab91451c87",
                            EmailConfirmed = false,
                            FirstName = "Mona",
                            Gender = "Female",
                            IsRegister = true,
                            LastName = "Omar",
                            LockoutEnabled = false,
                            MaritalStatus = "Single",
                            NID = "5312523632",
                            NormalizedEmail = "MONA@EXAMPLE.COM",
                            NormalizedUserName = "MONAOMAR123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74ae7286-8b05-4e78-9eb4-e767d9482a25",
                            TwoFactorEnabled = false,
                            UserName = "monaomar123"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1988, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "B+",
                            ConcurrencyStamp = "efef7251-95b1-4fe3-bc97-79b1a5ad20f3",
                            EmailConfirmed = false,
                            FirstName = "Mohammed",
                            Gender = "Male",
                            IsRegister = true,
                            LastName = "Ali",
                            LockoutEnabled = false,
                            MaritalStatus = "Married",
                            NID = "9876543210",
                            NormalizedEmail = "MOHAMMED@EXAMPLE.COM",
                            NormalizedUserName = "MOHAMMED123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6247c2c3-45c6-4159-96f6-21f88ec66d2a",
                            TwoFactorEnabled = false,
                            UserName = "MOHAMMED123"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1995, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "AB+",
                            ConcurrencyStamp = "8f6ed540-7582-4c8a-95fe-5325d9bb3910",
                            EmailConfirmed = false,
                            FirstName = "Aisha",
                            Gender = "Female",
                            IsRegister = true,
                            LastName = "Ali",
                            LockoutEnabled = false,
                            MaritalStatus = "Married",
                            NID = "0123456789",
                            NormalizedEmail = "AISHA@EXAMPLE.COM",
                            NormalizedUserName = "AISHA321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d905a6e-a62c-42ab-b859-188d99ac4cf7",
                            TwoFactorEnabled = false,
                            UserName = "AISHA321"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1978, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "O-",
                            ConcurrencyStamp = "7782d6a6-43e2-433f-a457-55b0d349c8ae",
                            EmailConfirmed = false,
                            FirstName = "Ahmad",
                            Gender = "Male",
                            IsRegister = true,
                            LastName = "Ali",
                            LockoutEnabled = false,
                            MaritalStatus = "Single",
                            NID = "1122334455",
                            NormalizedEmail = "AHMAD@EXAMPLE.COM",
                            NormalizedUserName = "AHMAD567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8bc981a-64d7-4ee2-be23-3144f1bdad82",
                            TwoFactorEnabled = false,
                            UserName = "AHMAD567"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1989, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "A-",
                            ConcurrencyStamp = "946c7069-8b71-4a45-9d2a-eb1785da5f71",
                            EmailConfirmed = false,
                            FirstName = "Aya",
                            Gender = "Female",
                            IsRegister = true,
                            LastName = "Ali",
                            LockoutEnabled = false,
                            MaritalStatus = "Married",
                            NID = "3344556677",
                            NormalizedEmail = "AYA@EXAMPLE.COM",
                            NormalizedUserName = "AYA789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0de56b2-399c-47bf-bbd0-c9dae652862d",
                            TwoFactorEnabled = false,
                            UserName = "AYA789"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1995, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "B-",
                            ConcurrencyStamp = "440d5205-2052-43a8-871a-324bb35cb435",
                            EmailConfirmed = false,
                            FirstName = "Omar",
                            Gender = "Male",
                            IsRegister = true,
                            LastName = "Ali",
                            LockoutEnabled = false,
                            MaritalStatus = "Single",
                            NID = "5544332211",
                            NormalizedEmail = "OMAR@EXAMPLE.COM",
                            NormalizedUserName = "OMAR101",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d3cec7c-2161-4759-9f2f-b209068ab0d6",
                            TwoFactorEnabled = false,
                            UserName = "OMAR101"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1980, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "AB-",
                            ConcurrencyStamp = "88cd4503-040a-4f64-bc47-af64edd3096e",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            Gender = "Female",
                            IsRegister = true,
                            LastName = "Ali",
                            LockoutEnabled = false,
                            MaritalStatus = "Single",
                            NID = "7788990011",
                            NormalizedEmail = "SARA@EXAMPLE.COM",
                            NormalizedUserName = "SARA2022",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42ed68c3-98e7-4318-ac6c-93782a48170c",
                            TwoFactorEnabled = false,
                            UserName = "SARA2022"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1998, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "O+",
                            ConcurrencyStamp = "d7e25e3a-489e-4fb3-922c-211615464bb5",
                            EmailConfirmed = false,
                            FirstName = "Ali",
                            Gender = "Male",
                            IsRegister = true,
                            LastName = "Ali",
                            LockoutEnabled = false,
                            MaritalStatus = "Single",
                            NID = "6677889900",
                            NormalizedEmail = "ALI@EXAMPLE.COM",
                            NormalizedUserName = "ALI3030",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1b94038-f558-4f2f-b71a-dd1d80fef0c4",
                            TwoFactorEnabled = false,
                            UserName = "ALI3030"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1982, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "A+",
                            ConcurrencyStamp = "2ad2fa1c-4a9b-4791-b8a7-b4f95925e345",
                            EmailConfirmed = false,
                            FirstName = "Laila",
                            Gender = "Female",
                            IsRegister = true,
                            LastName = "Ali",
                            LockoutEnabled = false,
                            MaritalStatus = "Married",
                            NID = "1122334455",
                            NormalizedEmail = "LAILA@EXAMPLE.COM",
                            NormalizedUserName = "LAILA4040",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c08ee7a3-0025-4e0e-87cb-1a2828a1c89f",
                            TwoFactorEnabled = false,
                            UserName = "LAILA4040"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.ApplicationUserDisease", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ValueResult")
                        .HasColumnType("float");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("UserDiseases");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ApplicationUserId = "1",
                            Description = "Managed with insulin injections.",
                            Diagnosis = "Confirmed Type 1 Diabetes",
                            DiagnosisDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseId = 1,
                            Height = 1.75,
                            Type = "Type 1 Diabetes",
                            ValueResult = 7.2000000000000002,
                            Weight = 70.0
                        },
                        new
                        {
                            ID = 2,
                            ApplicationUserId = "2",
                            Description = "High blood pressure managed with medication.",
                            Diagnosis = "Stage 2 Hypertension",
                            DiagnosisDate = new DateTime(2019, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseId = 2,
                            Height = 1.8,
                            Type = "Hypertension",
                            ValueResult = 140.0,
                            Weight = 85.0
                        },
                        new
                        {
                            ID = 3,
                            ApplicationUserId = "3",
                            Description = "Chronic condition managed with inhalers.",
                            Diagnosis = "Mild Persistent Asthma",
                            DiagnosisDate = new DateTime(2018, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseId = 3,
                            Height = 1.6499999999999999,
                            Type = "Asthma",
                            ValueResult = 1.0,
                            Weight = 60.0
                        },
                        new
                        {
                            ID = 4,
                            ApplicationUserId = "4",
                            Description = "Undergoing chemotherapy.",
                            Diagnosis = "Stage 2 Breast Cancer",
                            DiagnosisDate = new DateTime(2021, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseId = 4,
                            Height = 1.7,
                            Type = "Cancer",
                            ValueResult = 3.3999999999999999,
                            Weight = 65.0
                        },
                        new
                        {
                            ID = 5,
                            ApplicationUserId = "5",
                            Description = "Progressive memory loss.",
                            Diagnosis = "Early Onset Alzheimer's",
                            DiagnosisDate = new DateTime(2017, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseId = 5,
                            Height = 1.6000000000000001,
                            Type = "Alzheimer's Disease",
                            ValueResult = 4.5,
                            Weight = 55.0
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Attachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filepath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<int?>("TestResultID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserDiseaseId")
                        .HasColumnType("int");

                    b.Property<string>("ViewUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("TestResultID");

                    b.HasIndex("UserDiseaseId");

                    b.ToTable("attachments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DownloadUrl = "lol",
                            FileName = "33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            Filepath = "D:\\Final Project\\MedicalSystem\\BackEnd\\Medical System\\wwwroot\\Test\\33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            FolderName = "Test",
                            Title = "Sample Attachment 1",
                            Type = "Image",
                            ViewUrl = "lol"
                        },
                        new
                        {
                            ID = 2,
                            DownloadUrl = "lol",
                            FileName = "6bb72574-4c96-4d5a-8ff2-d0ebf750631f.jpeg",
                            Filepath = "D:\\Final Project\\MedicalSystem\\BackEnd\\Medical System\\wwwroot\\Test\\6bb72574-4c96-4d5a-8ff2-d0ebf750631f.jpeg",
                            FolderName = "Test",
                            Title = "Sample Attachment 2",
                            Type = "Image",
                            ViewUrl = "lol"
                        },
                        new
                        {
                            ID = 3,
                            DownloadUrl = "lol",
                            FileName = "edfdf2bd-7ff0-48aa-a4db-8dfc0fa11a2a.jpg",
                            Filepath = "D:\\Final Project\\MedicalSystem\\BackEnd\\Medical System\\wwwroot\\Test\\edfdf2bd-7ff0-48aa-a4db-8dfc0fa11a2a.jpg",
                            FolderName = "Test",
                            Title = "Sample Attachment 3",
                            Type = "Image",
                            ViewUrl = "lol"
                        },
                        new
                        {
                            ID = 4,
                            DownloadUrl = "lol",
                            FileName = "33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            Filepath = "D:\\Final Project\\MedicalSystem\\BackEnd\\Medical System\\wwwroot\\Test\\33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            FolderName = "Test",
                            Title = "Sample Attachment 1",
                            Type = "Image",
                            ViewUrl = "lol"
                        },
                        new
                        {
                            ID = 5,
                            DownloadUrl = "lol",
                            FileName = "33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            Filepath = "D:\\Final Project\\MedicalSystem\\BackEnd\\Medical System\\wwwroot\\Test\\33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            FolderName = "Test",
                            Title = "Sample Attachment 1",
                            Type = "Image",
                            ViewUrl = "lol"
                        },
                        new
                        {
                            ID = 6,
                            DownloadUrl = "lol",
                            FileName = "33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            Filepath = "D:\\Final Project\\MedicalSystem\\BackEnd\\Medical System\\wwwroot\\Test\\33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            FolderName = "Test",
                            Title = "Sample Attachment 1",
                            Type = "Image",
                            ViewUrl = "lol"
                        },
                        new
                        {
                            ID = 7,
                            DownloadUrl = "lol",
                            FileName = "33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            Filepath = "D:\\Final Project\\MedicalSystem\\BackEnd\\Medical System\\wwwroot\\Test\\33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            FolderName = "Test",
                            Title = "Sample Attachment 1",
                            Type = "Image",
                            ViewUrl = "lol"
                        },
                        new
                        {
                            ID = 8,
                            DownloadUrl = "lol",
                            FileName = "33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            Filepath = "D:\\Final Project\\MedicalSystem\\BackEnd\\Medical System\\wwwroot\\Test\\33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            FolderName = "Test",
                            Title = "Sample Attachment 1",
                            Type = "Image",
                            ViewUrl = "lol"
                        },
                        new
                        {
                            ID = 9,
                            DownloadUrl = "lol",
                            FileName = "33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            Filepath = "D:\\Final Project\\MedicalSystem\\BackEnd\\Medical System\\wwwroot\\Test\\33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            FolderName = "Test",
                            Title = "Sample Attachment 1",
                            Type = "Image",
                            ViewUrl = "lol"
                        },
                        new
                        {
                            ID = 10,
                            DownloadUrl = "lol",
                            FileName = "33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            Filepath = "D:\\Final Project\\MedicalSystem\\BackEnd\\Medical System\\wwwroot\\Test\\33c1aa8a-c108-42cb-9686-7414da0d0492.jpg",
                            FolderName = "Test",
                            Title = "Sample Attachment 1",
                            Type = "Image",
                            ViewUrl = "lol"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Clinic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoID")
                        .HasColumnType("int");

                    b.Property<string>("WorkDays")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PhotoID")
                        .IsUnique();

                    b.ToTable("clinics");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Elzahraa",
                            PhotoID = 1,
                            WorkDays = "[2,3,5,7]"
                        },
                        new
                        {
                            ID = 2,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Alpha",
                            PhotoID = 2,
                            WorkDays = "[3,4,6]"
                        },
                        new
                        {
                            ID = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Mediplus",
                            PhotoID = 3,
                            WorkDays = "[4,5,6,1]"
                        },
                        new
                        {
                            ID = 4,
                            DepartmentID = 4,
                            Description = "",
                            Name = "Elzahraa",
                            PhotoID = 4,
                            WorkDays = "[2,3,7]"
                        },
                        new
                        {
                            ID = 5,
                            DepartmentID = 5,
                            Description = "",
                            Name = "Alpha",
                            PhotoID = 5,
                            WorkDays = "[3,4,5,6]"
                        },
                        new
                        {
                            ID = 6,
                            DepartmentID = 6,
                            Description = "",
                            Name = "Mediplus",
                            PhotoID = 6,
                            WorkDays = "[4,5,7]"
                        },
                        new
                        {
                            ID = 7,
                            DepartmentID = 7,
                            Description = "",
                            Name = "Elzahraa",
                            PhotoID = 7,
                            WorkDays = "[2,4,6]"
                        },
                        new
                        {
                            ID = 8,
                            DepartmentID = 8,
                            Description = "",
                            Name = "Alpha",
                            PhotoID = 8,
                            WorkDays = "[3,5,7]"
                        },
                        new
                        {
                            ID = 9,
                            DepartmentID = 9,
                            Description = "",
                            Name = "Mediplus",
                            PhotoID = 9,
                            WorkDays = "[4,6,1]"
                        },
                        new
                        {
                            ID = 10,
                            DepartmentID = 10,
                            Description = "",
                            Name = "Elzahraa",
                            PhotoID = 10,
                            WorkDays = "[2,3,5,7]"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("HospitalID");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HospitalID = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            ID = 2,
                            HospitalID = 1,
                            Name = "Orthopedics"
                        },
                        new
                        {
                            ID = 3,
                            HospitalID = 2,
                            Name = "Neurology"
                        },
                        new
                        {
                            ID = 4,
                            HospitalID = 2,
                            Name = "Oncology"
                        },
                        new
                        {
                            ID = 5,
                            HospitalID = 3,
                            Name = "Dermatology"
                        },
                        new
                        {
                            ID = 6,
                            HospitalID = 3,
                            Name = "Endocrinology"
                        },
                        new
                        {
                            ID = 7,
                            HospitalID = 4,
                            Name = "Gastroenterology"
                        },
                        new
                        {
                            ID = 8,
                            HospitalID = 4,
                            Name = "Hematology"
                        },
                        new
                        {
                            ID = 9,
                            HospitalID = 5,
                            Name = "Immunology"
                        },
                        new
                        {
                            ID = 10,
                            HospitalID = 5,
                            Name = "Nephrology"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Disease", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Causes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Diseases");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Causes = "Genetic factors, poor diet, lack of exercise, obesity.",
                            Description = "A chronic condition that affects how your body turns food into energy.",
                            Name = "Diabetes",
                            Symptoms = "Increased thirst, frequent urination, extreme hunger, unexplained weight loss, presence of ketones in the urine."
                        },
                        new
                        {
                            ID = 2,
                            Causes = "Genetic factors, high salt intake, obesity, lack of physical activity, alcohol consumption.",
                            Description = "A condition in which the force of the blood against the artery walls is too high.",
                            Name = "Hypertension",
                            Symptoms = "Often has no symptoms but can include headaches, shortness of breath, or nosebleeds."
                        },
                        new
                        {
                            ID = 3,
                            Causes = "Genetic factors, respiratory infections, allergens, air pollutants.",
                            Description = "A condition in which your airways narrow and swell and produce extra mucus.",
                            Name = "Asthma",
                            Symptoms = "Shortness of breath, chest tightness or pain, wheezing, coughing."
                        },
                        new
                        {
                            ID = 4,
                            Causes = "Genetic factors, lifestyle factors such as smoking and diet, environmental exposures to chemicals and radiation.",
                            Description = "A group of diseases involving abnormal cell growth with the potential to invade or spread to other parts of the body.",
                            Name = "Cancer",
                            Symptoms = "Varies by type but can include lumps, abnormal bleeding, prolonged cough, unexplained weight loss."
                        },
                        new
                        {
                            ID = 5,
                            Causes = "Genetic factors, age, family history, certain genetic mutations.",
                            Description = "A progressive disorder that causes brain cells to waste away (degenerate) and die.",
                            Name = "Alzheimer's Disease",
                            Symptoms = "Memory loss, confusion, difficulty with language, difficulty in making decisions, personality changes."
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Equipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("equipments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "High-field MRI machine for diagnostic imaging",
                            Name = "MRI Machine"
                        },
                        new
                        {
                            ID = 2,
                            Description = "X-ray machine for radiographic imaging",
                            Name = "X-ray Machine"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Ultrasound machine for medical imaging",
                            Name = "Ultrasound Machine"
                        },
                        new
                        {
                            ID = 4,
                            Description = "CT scanner for detailed cross-sectional images",
                            Name = "CT Scanner"
                        },
                        new
                        {
                            ID = 5,
                            Description = "PET scanner for functional imaging",
                            Name = "PET Scanner"
                        },
                        new
                        {
                            ID = 6,
                            Description = "Mammography machine for breast imaging",
                            Name = "Mammography Machine"
                        },
                        new
                        {
                            ID = 7,
                            Description = "Fluoroscopy machine for real-time imaging",
                            Name = "Fluoroscopy Machine"
                        },
                        new
                        {
                            ID = 8,
                            Description = "DEXA scanner for bone density measurement",
                            Name = "DEXA Scanner"
                        },
                        new
                        {
                            ID = 9,
                            Description = "Gamma camera for nuclear medicine imaging",
                            Name = "Gamma Camera"
                        },
                        new
                        {
                            ID = 10,
                            Description = "Endoscopy system for internal imaging",
                            Name = "Endoscopy System"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Hospital", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Government")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("hospitals");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            City = "New York City",
                            Country = "United States",
                            Government = "State Government",
                            Name = "Mount Sinai Hospital",
                            Phone = "+1-212-241-6500",
                            Type = 0
                        },
                        new
                        {
                            ID = 2,
                            City = "Rochester",
                            Country = "United States",
                            Government = "Local Government",
                            Name = "Mayo Clinic",
                            Phone = "+1-507-284-2511",
                            Type = 1
                        },
                        new
                        {
                            ID = 3,
                            City = "Los Angeles",
                            Country = "United States",
                            Government = "Private Hospital",
                            Name = "Cedars-Sinai Medical Center",
                            Phone = "+1-310-423-3277",
                            Type = 1
                        },
                        new
                        {
                            ID = 4,
                            City = "Chicago",
                            Country = "United States",
                            Government = "University Hospital",
                            Name = "Northwestern Memorial Hospital",
                            Phone = "+1-312-926-2000",
                            Type = 0
                        },
                        new
                        {
                            ID = 5,
                            City = "Houston",
                            Country = "United States",
                            Government = "Veterans Hospital",
                            Name = "Michael E. DeBakey VA Medical Center",
                            Phone = "+1-713-791-1414",
                            Type = 1
                        },
                        new
                        {
                            ID = 6,
                            City = "Philadelphia",
                            Country = "United States",
                            Government = "Children's Hospital",
                            Name = "Children's Hospital of Philadelphia",
                            Phone = "+1-215-590-1000",
                            Type = 0
                        },
                        new
                        {
                            ID = 7,
                            City = "Phoenix",
                            Country = "United States",
                            Government = "Research Hospital",
                            Name = "Mayo Clinic Hospital",
                            Phone = "+1-480-515-6296",
                            Type = 1
                        },
                        new
                        {
                            ID = 8,
                            City = "San Antonio",
                            Country = "United States",
                            Government = "Teaching Hospital",
                            Name = "University Hospital - University of Texas Health Science Center",
                            Phone = "+1-210-358-4000",
                            Type = 0
                        },
                        new
                        {
                            ID = 9,
                            City = "San Diego",
                            Country = "United States",
                            Government = "Community Hospital",
                            Name = "Scripps Memorial Hospital La Jolla",
                            Phone = "+1-858-626-4123",
                            Type = 1
                        },
                        new
                        {
                            ID = 10,
                            City = "Dallas",
                            Country = "United States",
                            Government = "Children's Hospital",
                            Name = "Children's Health - Children's Medical Center Dallas",
                            Phone = "+1-214-456-7000",
                            Type = 0
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Lab", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("HospitalID");

                    b.ToTable("labs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HospitalID = 1,
                            Name = "Clinical Pathology Lab",
                            Type = 1
                        },
                        new
                        {
                            ID = 2,
                            HospitalID = 2,
                            Name = "Microbiology Lab",
                            Type = 0
                        },
                        new
                        {
                            ID = 3,
                            HospitalID = 3,
                            Name = "Chemistry Lab",
                            Type = 1
                        },
                        new
                        {
                            ID = 4,
                            HospitalID = 4,
                            Name = "Hematology Lab",
                            Type = 0
                        },
                        new
                        {
                            ID = 5,
                            HospitalID = 5,
                            Name = "Immunology Lab",
                            Type = 0
                        },
                        new
                        {
                            ID = 6,
                            HospitalID = 6,
                            Name = "Genetics Lab",
                            Type = 0
                        },
                        new
                        {
                            ID = 7,
                            HospitalID = 7,
                            Name = "Histology Lab",
                            Type = 1
                        },
                        new
                        {
                            ID = 8,
                            HospitalID = 8,
                            Name = "Virology Lab",
                            Type = 0
                        },
                        new
                        {
                            ID = 9,
                            HospitalID = 9,
                            Name = "Toxicology Lab",
                            Type = 1
                        },
                        new
                        {
                            ID = 10,
                            HospitalID = 10,
                            Name = "Molecular Biology Lab",
                            Type = 1
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Medicine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("medicines");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Aspirin"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Paracetamol"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Ibuprofen"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Acetaminophen"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Omeprazole"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Lisinopril"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Metformin"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Simvastatin"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Atorvastatin"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Levothyroxine"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.MedicineType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineID")
                        .HasColumnType("int");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.Property<string>("Warning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MedicineID");

                    b.HasIndex("TypeID");

                    b.ToTable("medicinesType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Painkiller",
                            ExpirationDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 1,
                            SideEffects = "May cause drowsiness",
                            TypeID = 1,
                            Warning = "Do not exceed recommended dosage"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Antibiotic",
                            ExpirationDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 2,
                            SideEffects = "Possible nausea and diarrhea",
                            TypeID = 2,
                            Warning = "Take with food"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Antacid",
                            ExpirationDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 3,
                            SideEffects = "Relieves heartburn",
                            TypeID = 3,
                            Warning = "Avoid taking other medications within 2 hours"
                        },
                        new
                        {
                            ID = 4,
                            Description = "Antihistamine",
                            ExpirationDate = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 4,
                            SideEffects = "May cause drowsiness",
                            TypeID = 4,
                            Warning = "Avoid alcohol while taking"
                        },
                        new
                        {
                            ID = 5,
                            Description = "Anti-inflammatory",
                            ExpirationDate = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 5,
                            SideEffects = "Take with food or milk",
                            TypeID = 5,
                            Warning = "Not recommended for long-term use"
                        },
                        new
                        {
                            ID = 6,
                            Description = "Antidepressant",
                            ExpirationDate = new DateTime(2025, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 6,
                            SideEffects = "May take several weeks to see effects",
                            TypeID = 6,
                            Warning = "Do not abruptly discontinue"
                        },
                        new
                        {
                            ID = 7,
                            Description = "Anticoagulant",
                            ExpirationDate = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 7,
                            SideEffects = "Increased risk of bleeding",
                            TypeID = 7,
                            Warning = "Regular monitoring required"
                        },
                        new
                        {
                            ID = 8,
                            Description = "Antidiabetic",
                            ExpirationDate = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 8,
                            SideEffects = "Monitor blood sugar levels regularly",
                            TypeID = 8,
                            Warning = "Report any unusual symptoms to doctor"
                        },
                        new
                        {
                            ID = 9,
                            Description = "Antiemetic",
                            ExpirationDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 9,
                            SideEffects = "May cause drowsiness or dizziness",
                            TypeID = 9,
                            Warning = "Avoid driving or operating machinery"
                        },
                        new
                        {
                            ID = 10,
                            Description = "Antifungal",
                            ExpirationDate = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineID = 10,
                            SideEffects = "Apply as directed to affected area",
                            TypeID = 10,
                            Warning = "Complete full course of treatment"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.OTP", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("MS.Data.Entities.Pharmacy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("HospitalID");

                    b.ToTable("pharmacies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HospitalID = 1,
                            Name = "Walgreens"
                        },
                        new
                        {
                            ID = 2,
                            HospitalID = 2,
                            Name = "CVS Pharmacy"
                        },
                        new
                        {
                            ID = 3,
                            HospitalID = 3,
                            Name = "Rite Aid"
                        },
                        new
                        {
                            ID = 4,
                            HospitalID = 4,
                            Name = "Walmart Pharmacy"
                        },
                        new
                        {
                            ID = 5,
                            HospitalID = 5,
                            Name = "Target Pharmacy"
                        },
                        new
                        {
                            ID = 6,
                            HospitalID = 6,
                            Name = "Kroger Pharmacy"
                        },
                        new
                        {
                            ID = 7,
                            HospitalID = 7,
                            Name = "Costco Pharmacy"
                        },
                        new
                        {
                            ID = 8,
                            HospitalID = 8,
                            Name = "Publix Pharmacy"
                        },
                        new
                        {
                            ID = 9,
                            HospitalID = 9,
                            Name = "Wal-Mart Pharmacy"
                        },
                        new
                        {
                            ID = 10,
                            HospitalID = 10,
                            Name = "Safeway Pharmacy"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.PharmacyMedicine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("MedicineTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("MedicineTypeID");

                    b.HasIndex("PharmacyID");

                    b.ToTable("pharmacyMedicines");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Amount = 50,
                            MedicineTypeID = 1,
                            PharmacyID = 1,
                            Price = 10.99
                        },
                        new
                        {
                            ID = 2,
                            Amount = 100,
                            MedicineTypeID = 2,
                            PharmacyID = 2,
                            Price = 5.9900000000000002
                        },
                        new
                        {
                            ID = 3,
                            Amount = 75,
                            MedicineTypeID = 3,
                            PharmacyID = 3,
                            Price = 15.49
                        },
                        new
                        {
                            ID = 4,
                            Amount = 200,
                            MedicineTypeID = 4,
                            PharmacyID = 4,
                            Price = 8.75
                        },
                        new
                        {
                            ID = 5,
                            Amount = 150,
                            MedicineTypeID = 5,
                            PharmacyID = 5,
                            Price = 12.25
                        },
                        new
                        {
                            ID = 6,
                            Amount = 120,
                            MedicineTypeID = 6,
                            PharmacyID = 6,
                            Price = 9.9900000000000002
                        },
                        new
                        {
                            ID = 7,
                            Amount = 80,
                            MedicineTypeID = 7,
                            PharmacyID = 7,
                            Price = 17.5
                        },
                        new
                        {
                            ID = 8,
                            Amount = 90,
                            MedicineTypeID = 8,
                            PharmacyID = 8,
                            Price = 14.75
                        },
                        new
                        {
                            ID = 9,
                            Amount = 110,
                            MedicineTypeID = 9,
                            PharmacyID = 9,
                            Price = 11.25
                        },
                        new
                        {
                            ID = 10,
                            Amount = 70,
                            MedicineTypeID = 10,
                            PharmacyID = 10,
                            Price = 19.989999999999998
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.PlaceEquipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentID")
                        .HasColumnType("int");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EntityID");

                    b.HasIndex("EquipmentID");

                    b.ToTable("placeEquipments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EntityID = 1,
                            EquipmentID = 1,
                            PlaceType = 1
                        },
                        new
                        {
                            ID = 2,
                            EntityID = 2,
                            EquipmentID = 2,
                            PlaceType = 1
                        },
                        new
                        {
                            ID = 3,
                            EntityID = 3,
                            EquipmentID = 3,
                            PlaceType = 1
                        },
                        new
                        {
                            ID = 4,
                            EntityID = 4,
                            EquipmentID = 4,
                            PlaceType = 1
                        },
                        new
                        {
                            ID = 5,
                            EntityID = 5,
                            EquipmentID = 5,
                            PlaceType = 1
                        },
                        new
                        {
                            ID = 6,
                            EntityID = 6,
                            EquipmentID = 6,
                            PlaceType = 1
                        },
                        new
                        {
                            ID = 7,
                            EntityID = 7,
                            EquipmentID = 7,
                            PlaceType = 1
                        },
                        new
                        {
                            ID = 8,
                            EntityID = 8,
                            EquipmentID = 8,
                            PlaceType = 1
                        },
                        new
                        {
                            ID = 9,
                            EntityID = 9,
                            EquipmentID = 9,
                            PlaceType = 1
                        },
                        new
                        {
                            ID = 10,
                            EntityID = 10,
                            EquipmentID = 10,
                            PlaceType = 1
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.PlacePrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("PlaceID");

                    b.ToTable("placePrice");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "X-Alpha",
                            PlaceID = 2,
                            PlaceType = 1,
                            Price = 341.39999999999998
                        },
                        new
                        {
                            ID = 2,
                            Name = "X-Beta",
                            PlaceID = 3,
                            PlaceType = 2,
                            Price = 419.99000000000001
                        },
                        new
                        {
                            ID = 3,
                            Name = "X-ray",
                            PlaceID = 1,
                            PlaceType = 1,
                            Price = 260.39999999999998
                        },
                        new
                        {
                            ID = 4,
                            Name = "MRI",
                            PlaceID = 4,
                            PlaceType = 1,
                            Price = 599.99000000000001
                        },
                        new
                        {
                            ID = 5,
                            Name = "Ultrasound",
                            PlaceID = 5,
                            PlaceType = 1,
                            Price = 199.99000000000001
                        },
                        new
                        {
                            ID = 6,
                            Name = "CT Scan",
                            PlaceID = 6,
                            PlaceType = 1,
                            Price = 399.99000000000001
                        },
                        new
                        {
                            ID = 7,
                            Name = "PET Scan",
                            PlaceID = 7,
                            PlaceType = 1,
                            Price = 1199.99
                        },
                        new
                        {
                            ID = 8,
                            Name = "Mammography",
                            PlaceID = 8,
                            PlaceType = 1,
                            Price = 199.99000000000001
                        },
                        new
                        {
                            ID = 9,
                            Name = "Fluoroscopy",
                            PlaceID = 9,
                            PlaceType = 1,
                            Price = 699.99000000000001
                        },
                        new
                        {
                            ID = 10,
                            Name = "DEXA Scan",
                            PlaceID = 10,
                            PlaceType = 2,
                            Price = 249.99000000000001
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.PlaceShift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.Property<int>("ShiftID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EntityID");

                    b.HasIndex("ShiftID");

                    b.ToTable("placeShifts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EntityID = 1,
                            PlaceType = 1,
                            ShiftID = 1
                        },
                        new
                        {
                            ID = 2,
                            EntityID = 2,
                            PlaceType = 1,
                            ShiftID = 2
                        },
                        new
                        {
                            ID = 3,
                            EntityID = 3,
                            PlaceType = 1,
                            ShiftID = 2
                        },
                        new
                        {
                            ID = 4,
                            EntityID = 4,
                            PlaceType = 1,
                            ShiftID = 1
                        },
                        new
                        {
                            ID = 5,
                            EntityID = 5,
                            PlaceType = 1,
                            ShiftID = 2
                        },
                        new
                        {
                            ID = 6,
                            EntityID = 6,
                            PlaceType = 1,
                            ShiftID = 1
                        },
                        new
                        {
                            ID = 7,
                            EntityID = 7,
                            PlaceType = 1,
                            ShiftID = 2
                        },
                        new
                        {
                            ID = 8,
                            EntityID = 8,
                            PlaceType = 1,
                            ShiftID = 1
                        },
                        new
                        {
                            ID = 9,
                            EntityID = 9,
                            PlaceType = 1,
                            ShiftID = 2
                        },
                        new
                        {
                            ID = 10,
                            EntityID = 10,
                            PlaceType = 1,
                            ShiftID = 1
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Reservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ClinicID")
                        .HasColumnType("int");

                    b.Property<int?>("LabID")
                        .HasColumnType("int");

                    b.Property<int>("PlacePriceId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("LabID");

                    b.HasIndex("PlacePriceId");

                    b.HasIndex("UserID");

                    b.ToTable("reservations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PlacePriceId = 1,
                            SerialNumber = "45165153",
                            State = 1,
                            Time = new DateTime(2024, 3, 4, 1, 41, 32, 513, DateTimeKind.Local).AddTicks(741),
                            UserID = "1"
                        },
                        new
                        {
                            ID = 2,
                            PlacePriceId = 1,
                            SerialNumber = "543864963",
                            State = 0,
                            Time = new DateTime(2024, 3, 4, 1, 41, 32, 513, DateTimeKind.Local).AddTicks(1531),
                            UserID = "2"
                        },
                        new
                        {
                            ID = 3,
                            PlacePriceId = 2,
                            SerialNumber = "70000001",
                            State = 1,
                            Time = new DateTime(2024, 3, 4, 1, 41, 32, 513, DateTimeKind.Local).AddTicks(6478),
                            UserID = "3"
                        },
                        new
                        {
                            ID = 4,
                            PlacePriceId = 2,
                            SerialNumber = "70000002",
                            State = 1,
                            Time = new DateTime(2024, 3, 5, 1, 41, 32, 513, DateTimeKind.Local).AddTicks(6491),
                            UserID = "4"
                        },
                        new
                        {
                            ID = 5,
                            PlacePriceId = 3,
                            SerialNumber = "70000003",
                            State = 1,
                            Time = new DateTime(2024, 3, 6, 1, 41, 32, 513, DateTimeKind.Local).AddTicks(6504),
                            UserID = "5"
                        },
                        new
                        {
                            ID = 6,
                            PlacePriceId = 3,
                            SerialNumber = "70000004",
                            State = 1,
                            Time = new DateTime(2024, 3, 7, 1, 41, 32, 513, DateTimeKind.Local).AddTicks(6517),
                            UserID = "6"
                        },
                        new
                        {
                            ID = 7,
                            PlacePriceId = 1,
                            SerialNumber = "70000005",
                            State = 0,
                            Time = new DateTime(2024, 3, 8, 1, 41, 32, 513, DateTimeKind.Local).AddTicks(6530),
                            UserID = "7"
                        },
                        new
                        {
                            ID = 8,
                            PlacePriceId = 1,
                            SerialNumber = "70000006",
                            State = 0,
                            Time = new DateTime(2024, 3, 9, 1, 41, 32, 513, DateTimeKind.Local).AddTicks(6543),
                            UserID = "8"
                        },
                        new
                        {
                            ID = 9,
                            PlacePriceId = 1,
                            SerialNumber = "70000007",
                            State = 0,
                            Time = new DateTime(2024, 3, 10, 1, 41, 32, 513, DateTimeKind.Local).AddTicks(6556),
                            UserID = "9"
                        },
                        new
                        {
                            ID = 10,
                            PlacePriceId = 1,
                            SerialNumber = "70000008",
                            State = 1,
                            Time = new DateTime(2024, 3, 11, 1, 41, 32, 513, DateTimeKind.Local).AddTicks(6569),
                            UserID = "10"
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Shift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("shifts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EndTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 1,
                            Name = "Morning Shift",
                            PlaceType = 1,
                            StartTime = new DateTime(2024, 2, 17, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            EndTime = new DateTime(2024, 2, 17, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 2,
                            Name = "Evening Shift",
                            PlaceType = 1,
                            StartTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            EndTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 3,
                            Name = "Morning Shift",
                            PlaceType = 1,
                            StartTime = new DateTime(2024, 2, 17, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            EndTime = new DateTime(2024, 2, 17, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 4,
                            Name = "Evening Shift",
                            PlaceType = 1,
                            StartTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            EndTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 5,
                            Name = "Morning Shift",
                            PlaceType = 1,
                            StartTime = new DateTime(2024, 2, 17, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 6,
                            EndTime = new DateTime(2024, 2, 17, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 6,
                            Name = "Evening Shift",
                            PlaceType = 1,
                            StartTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 7,
                            EndTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 7,
                            Name = "Morning Shift",
                            PlaceType = 1,
                            StartTime = new DateTime(2024, 2, 17, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 8,
                            EndTime = new DateTime(2024, 2, 17, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 8,
                            Name = "Evening Shift",
                            PlaceType = 1,
                            StartTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 9,
                            EndTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 9,
                            Name = "Morning Shift",
                            PlaceType = 1,
                            StartTime = new DateTime(2024, 2, 17, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 10,
                            EndTime = new DateTime(2024, 2, 17, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityID = 10,
                            Name = "Evening Shift",
                            PlaceType = 1,
                            StartTime = new DateTime(2024, 2, 17, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.Test", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PhotoID")
                        .IsUnique();

                    b.ToTable("tests");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Blood Test",
                            PhotoID = 1
                        },
                        new
                        {
                            ID = 2,
                            Name = "Urinalysis",
                            PhotoID = 2
                        },
                        new
                        {
                            ID = 3,
                            Name = "MRI Scan",
                            PhotoID = 3
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.TestLab", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LabID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LabID");

                    b.HasIndex("TestID");

                    b.ToTable("testLabs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Description of test lab 1",
                            LabID = 1,
                            Price = 100.0,
                            TestID = 1
                        },
                        new
                        {
                            ID = 2,
                            Description = "Description of test lab 2",
                            LabID = 2,
                            Price = 150.0,
                            TestID = 2
                        },
                        new
                        {
                            ID = 3,
                            Description = "Description of test lab 3",
                            LabID = 3,
                            Price = 200.0,
                            TestID = 3
                        });
                });

            modelBuilder.Entity("MS.Data.Entities.TestResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TestId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("MS.Data.Entities.Types", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("types");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Type 1"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Type 2"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Type 3"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Type 4"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Type 5"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Type 6"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Type 7"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Type 8"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Type 9"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Type 10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MS.Data.Entities.ApplicationUserDisease", b =>
                {
                    b.HasOne("MS.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserDiseases")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Disease", "Disease")
                        .WithMany("UserDiseases")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Disease");
                });

            modelBuilder.Entity("MS.Data.Entities.Attachment", b =>
                {
                    b.HasOne("MS.Data.Entities.TestResult", "TestResult")
                        .WithMany("Attachments")
                        .HasForeignKey("TestResultID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MS.Data.Entities.ApplicationUserDisease", "UserDisease")
                        .WithMany("Attachments")
                        .HasForeignKey("UserDiseaseId");

                    b.Navigation("TestResult");

                    b.Navigation("UserDisease");
                });

            modelBuilder.Entity("MS.Data.Entities.Clinic", b =>
                {
                    b.HasOne("MS.Data.Entities.Department", "Department")
                        .WithMany("Clinics")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Attachment", "Photo")
                        .WithOne("Clinic")
                        .HasForeignKey("MS.Data.Entities.Clinic", "PhotoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("MS.Data.Entities.Department", b =>
                {
                    b.HasOne("MS.Data.Entities.Hospital", "Hospital")
                        .WithMany("Departments")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("MS.Data.Entities.Lab", b =>
                {
                    b.HasOne("MS.Data.Entities.Hospital", "Hospital")
                        .WithMany("Labs")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("MS.Data.Entities.MedicineType", b =>
                {
                    b.HasOne("MS.Data.Entities.Medicine", "Medicine")
                        .WithMany("MedicineTypes")
                        .HasForeignKey("MedicineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Types", "Types")
                        .WithMany("MedicineTypes")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("MS.Data.Entities.OTP", b =>
                {
                    b.HasOne("MS.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MS.Data.Entities.Pharmacy", b =>
                {
                    b.HasOne("MS.Data.Entities.Hospital", "Hospital")
                        .WithMany("Pharmacies")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("MS.Data.Entities.PharmacyMedicine", b =>
                {
                    b.HasOne("MS.Data.Entities.MedicineType", "MedicineType")
                        .WithMany("PharmacyMedicines")
                        .HasForeignKey("MedicineTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyMedicines")
                        .HasForeignKey("PharmacyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineType");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("MS.Data.Entities.PlaceEquipment", b =>
                {
                    b.HasOne("MS.Data.Entities.Clinic", null)
                        .WithMany("PlaceEquipment")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Lab", null)
                        .WithMany("PlaceEquipments")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Pharmacy", null)
                        .WithMany("PlaceEquipments")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Equipment", "Equipment")
                        .WithMany("PlaceEquipments")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("MS.Data.Entities.PlacePrice", b =>
                {
                    b.HasOne("MS.Data.Entities.Clinic", null)
                        .WithMany("PlacePrices")
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Lab", null)
                        .WithMany("PlacePrices")
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MS.Data.Entities.PlaceShift", b =>
                {
                    b.HasOne("MS.Data.Entities.Clinic", null)
                        .WithMany("PlaceShifts")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Lab", null)
                        .WithMany("PlaceShifts")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Pharmacy", null)
                        .WithMany("PlaceShifts")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Shift", "Shift")
                        .WithMany("PlaceShifts")
                        .HasForeignKey("ShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MS.Data.Entities.Reservation", b =>
                {
                    b.HasOne("MS.Data.Entities.Clinic", null)
                        .WithMany("Reservations")
                        .HasForeignKey("ClinicID");

                    b.HasOne("MS.Data.Entities.Lab", null)
                        .WithMany("Reservations")
                        .HasForeignKey("LabID");

                    b.HasOne("MS.Data.Entities.PlacePrice", "PlacePrice")
                        .WithMany()
                        .HasForeignKey("PlacePriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.ApplicationUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlacePrice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MS.Data.Entities.Test", b =>
                {
                    b.HasOne("MS.Data.Entities.Attachment", "Photo")
                        .WithOne("Test")
                        .HasForeignKey("MS.Data.Entities.Test", "PhotoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("MS.Data.Entities.TestLab", b =>
                {
                    b.HasOne("MS.Data.Entities.Lab", "Lab")
                        .WithMany("TestLabs")
                        .HasForeignKey("LabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Test", "Test")
                        .WithMany("TestLabs")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("MS.Data.Entities.TestResult", b =>
                {
                    b.HasOne("MS.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("TestResults")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MS.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MS.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MS.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MS.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("TestResults");

                    b.Navigation("UserDiseases");
                });

            modelBuilder.Entity("MS.Data.Entities.ApplicationUserDisease", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("MS.Data.Entities.Attachment", b =>
                {
                    b.Navigation("Clinic");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("MS.Data.Entities.Clinic", b =>
                {
                    b.Navigation("PlaceEquipment");

                    b.Navigation("PlacePrices");

                    b.Navigation("PlaceShifts");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("MS.Data.Entities.Department", b =>
                {
                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("MS.Data.Entities.Disease", b =>
                {
                    b.Navigation("UserDiseases");
                });

            modelBuilder.Entity("MS.Data.Entities.Equipment", b =>
                {
                    b.Navigation("PlaceEquipments");
                });

            modelBuilder.Entity("MS.Data.Entities.Hospital", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Labs");

                    b.Navigation("Pharmacies");
                });

            modelBuilder.Entity("MS.Data.Entities.Lab", b =>
                {
                    b.Navigation("PlaceEquipments");

                    b.Navigation("PlacePrices");

                    b.Navigation("PlaceShifts");

                    b.Navigation("Reservations");

                    b.Navigation("TestLabs");
                });

            modelBuilder.Entity("MS.Data.Entities.Medicine", b =>
                {
                    b.Navigation("MedicineTypes");
                });

            modelBuilder.Entity("MS.Data.Entities.MedicineType", b =>
                {
                    b.Navigation("PharmacyMedicines");
                });

            modelBuilder.Entity("MS.Data.Entities.Pharmacy", b =>
                {
                    b.Navigation("PharmacyMedicines");

                    b.Navigation("PlaceEquipments");

                    b.Navigation("PlaceShifts");
                });

            modelBuilder.Entity("MS.Data.Entities.Shift", b =>
                {
                    b.Navigation("PlaceShifts");
                });

            modelBuilder.Entity("MS.Data.Entities.Test", b =>
                {
                    b.Navigation("TestLabs");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("MS.Data.Entities.TestResult", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("MS.Data.Entities.Types", b =>
                {
                    b.Navigation("MedicineTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
