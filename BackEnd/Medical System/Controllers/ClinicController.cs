using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using MS.Data.Entities;
using MS.Infrastructure.Repositories.UnitOfWork;

namespace Medical_System.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ClinicController : ControllerBase
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly ILogger _logger;

        public ClinicController(IUnitOfWork unitOfWork, ILogger logger)
        {
            _unitOfWork = unitOfWork;
            _logger = logger;
        }
        [HttpGet("Get/{ClinicID:int}")]
        public async Task<IActionResult> GetSingleClincAsync(int ClinicID)
        {
            try
            {
                var clinic = await _unitOfWork.Clinincs.GetByIdAsync(ClinicID);

                if (clinic == null)
                {
                    return NotFound($"Clinic with ID {ClinicID} not found.");
                }

                return Ok(clinic);
            }
            catch (Exception ex)
            {
                // Log the exception
                _logger.LogError($"An error occurred while processing the request: {ex.Message}");

                return StatusCode(500, $"An error occurred while processing the request:{ex.Message}");
            }
        }
        [HttpDelete("Delete/{ClinicID:int}")]
        public async Task<IActionResult> DeleteSingleAsync(int ClinicID)
        {
            try
            {
                var clinicToDelete = await _unitOfWork.Clinincs.GetByIdAsync(ClinicID);

                if (clinicToDelete == null)
                {
                    return NotFound($"Clinic with ID {ClinicID} not found.");
                }

                await _unitOfWork.Clinincs.DeleteAsync(clinicToDelete);

                return NoContent();
            }
            catch (Exception ex)
            {
                // Log the exception
                _logger.LogError($"An error occurred while processing the request: {ex}");
                //return to endpoint
                return StatusCode(500, $"An error occurred while processing the request: {ex.Message}");
            }
        }

        [HttpPost("Post")]
        public async Task PostSingleAsync(int departmentID,string name) //same comment as below
        {
            Clinic clinic = new Clinic() {
                DepartmentID = departmentID,
                Name=name
            };
            await _unitOfWork.Clinincs.AddAsync(clinic);
        }
        [HttpPut("Put/{ClinicID:int}")]
        public async Task<IActionResult> PutSingleAsync(int ClinicID, string name) // why not using dto bro
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                Clinic OldClinic = await _unitOfWork.Clinincs.GetByIdAsync(ClinicID);

                Clinic clinic = new Clinic()
                {
                    ID = ClinicID, //u can not addin id cuz autogenerated
                    Name = name,
                };

                await _unitOfWork.Clinincs.UpdateAsync(clinic);

                return NoContent(); // 204 No Content on successful update
            }
            catch (Exception ex)
            {
                // Log the exception
                _logger.LogError($"An error occurred while processing the request: {ex}");

                return StatusCode(500, $"An error occurred while processing the request. Please try again or contact support.");
            }
        }


    }
}
